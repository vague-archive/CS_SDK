// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Graphics
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SetCamera : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public SetCamera __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec2 Position { get { return (new Vec2()).__assign(__p.bb_pos + 0, __p.bb); } }
  public float Zoom { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float Rotation { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }
  public Vec2 Pivot { get { return (new Vec2()).__assign(__p.bb_pos + 16, __p.bb); } }

  public static Offset<Graphics.SetCamera> CreateSetCamera(FlatBufferBuilder builder, float position_X, float position_Y, float Zoom, float Rotation, float pivot_X, float pivot_Y) {
    builder.Prep(4, 24);
    builder.Prep(4, 8);
    builder.PutFloat(pivot_Y);
    builder.PutFloat(pivot_X);
    builder.PutFloat(Rotation);
    builder.PutFloat(Zoom);
    builder.Prep(4, 8);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<Graphics.SetCamera>(builder.Offset);
  }
}


}
