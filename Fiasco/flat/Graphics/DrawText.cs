// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Graphics
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DrawText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DrawText GetRootAsDrawText(ByteBuffer _bb) { return GetRootAsDrawText(_bb, new DrawText()); }
  public static DrawText GetRootAsDrawText(ByteBuffer _bb, DrawText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DrawText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Transform? Transform { get { int o = __p.__offset(4); return o != 0 ? (Transform?)(new Transform()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Z { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Vec2? Bounds { get { int o = __p.__offset(8); return o != 0 ? (Vec2?)(new Vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Text { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(10); }
  public Graphics.Color? Color { get { int o = __p.__offset(12); return o != 0 ? (Graphics.Color?)(new Graphics.Color()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float FontSize { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Graphics.TextAlignment TextAlignment { get { int o = __p.__offset(16); return o != 0 ? (Graphics.TextAlignment)__p.bb.Get(o + __p.bb_pos) : Graphics.TextAlignment.Left; } }

  public static void StartDrawText(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Transform> transformOffset) { builder.AddStruct(0, transformOffset.Value, 0); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(1, z, 0.0f); }
  public static void AddBounds(FlatBufferBuilder builder, Offset<Vec2> boundsOffset) { builder.AddStruct(2, boundsOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(3, textOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<Graphics.Color> colorOffset) { builder.AddStruct(4, colorOffset.Value, 0); }
  public static void AddFontSize(FlatBufferBuilder builder, float fontSize) { builder.AddFloat(5, fontSize, 0.0f); }
  public static void AddTextAlignment(FlatBufferBuilder builder, Graphics.TextAlignment textAlignment) { builder.AddByte(6, (byte)textAlignment, 0); }
  public static Offset<Graphics.DrawText> EndDrawText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Graphics.DrawText>(o);
  }
}


static public class DrawTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Transform*/, 40 /*Transform*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Z*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Bounds*/, 8 /*Vec2*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Text*/, false)
      && verifier.VerifyField(tablePos, 12 /*Color*/, 16 /*Graphics.Color*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FontSize*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*TextAlignment*/, 1 /*Graphics.TextAlignment*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
