// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Graphics
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DrawRectangle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DrawRectangle GetRootAsDrawRectangle(ByteBuffer _bb) { return GetRootAsDrawRectangle(_bb, new DrawRectangle()); }
  public static DrawRectangle GetRootAsDrawRectangle(ByteBuffer _bb, DrawRectangle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DrawRectangle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Transform? Transform { get { int o = __p.__offset(4); return o != 0 ? (Transform?)(new Transform()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Graphics.Color? Color { get { int o = __p.__offset(6); return o != 0 ? (Graphics.Color?)(new Graphics.Color()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public uint? AssetId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint?)null; } }

  public static void StartDrawRectangle(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Transform> transformOffset) { builder.AddStruct(0, transformOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<Graphics.Color> colorOffset) { builder.AddStruct(1, colorOffset.Value, 0); }
  public static void AddAssetId(FlatBufferBuilder builder, uint? assetId) { builder.AddUint(2, assetId); }
  public static Offset<Graphics.DrawRectangle> EndDrawRectangle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Graphics.DrawRectangle>(o);
  }
}


static public class DrawRectangleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Transform*/, 40 /*Transform*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Color*/, 16 /*Graphics.Color*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*AssetId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
