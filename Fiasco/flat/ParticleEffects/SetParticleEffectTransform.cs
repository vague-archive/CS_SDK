// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ParticleEffects
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SetParticleEffectTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SetParticleEffectTransform GetRootAsSetParticleEffectTransform(ByteBuffer _bb) { return GetRootAsSetParticleEffectTransform(_bb, new SetParticleEffectTransform()); }
  public static SetParticleEffectTransform GetRootAsSetParticleEffectTransform(ByteBuffer _bb, SetParticleEffectTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetParticleEffectTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Handle { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public Transform? Transform { get { int o = __p.__offset(6); return o != 0 ? (Transform?)(new Transform()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSetParticleEffectTransform(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddHandle(FlatBufferBuilder builder, ulong handle) { builder.AddUlong(0, handle, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Transform> transformOffset) { builder.AddStruct(1, transformOffset.Value, 0); }
  public static Offset<ParticleEffects.SetParticleEffectTransform> EndSetParticleEffectTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ParticleEffects.SetParticleEffectTransform>(o);
  }
}


static public class SetParticleEffectTransformVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Handle*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Transform*/, 40 /*Transform*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
