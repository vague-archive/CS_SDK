// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Transform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Transform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3 Position { get { return (new Vec3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Vec2 Scale { get { return (new Vec2()).__assign(__p.bb_pos + 12, __p.bb); } }
  public Vec2 Skew { get { return (new Vec2()).__assign(__p.bb_pos + 20, __p.bb); } }
  public Vec2 Pivot { get { return (new Vec2()).__assign(__p.bb_pos + 28, __p.bb); } }
  public float Rotation { get { return __p.bb.GetFloat(__p.bb_pos + 36); } }

  public static Offset<Transform> CreateTransform(FlatBufferBuilder builder, float position_X, float position_Y, float position_Z, float scale_X, float scale_Y, float skew_X, float skew_Y, float pivot_X, float pivot_Y, float Rotation) {
    builder.Prep(4, 40);
    builder.PutFloat(Rotation);
    builder.Prep(4, 8);
    builder.PutFloat(pivot_Y);
    builder.PutFloat(pivot_X);
    builder.Prep(4, 8);
    builder.PutFloat(skew_Y);
    builder.PutFloat(skew_X);
    builder.Prep(4, 8);
    builder.PutFloat(scale_Y);
    builder.PutFloat(scale_X);
    builder.Prep(4, 12);
    builder.PutFloat(position_Z);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<Transform>(builder.Offset);
  }
}

